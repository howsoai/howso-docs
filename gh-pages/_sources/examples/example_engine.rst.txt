
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/example_engine.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_example_engine.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_example_engine.py:


.. _howso engine example:

Engine Example
===============

An example to showcase the rich explanations from the Howso client.

Howso Engine allows Python users to access Howso's full functionality
with a user friendly API.

Below is an example use of the :class:`howso.engine.Trainee` class. The
example covers the basic steps in a typical Howso workflow:

1. Creation of a trainee.
2. Training.
3. Analysis of the trainee.
4. Reaction by the trainee to new data, which produces predicted values for the action features.
5. Extraction of audit data that explains the prediction.

.. GENERATED FROM PYTHON SOURCE LINES 21-92




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Reading breast cancer data set.
    Training on a random selection of 80% of the data.
    Number of trained cases: 546
    Analyzing the trainee.
    Reacting to 20% reserve test data.
    Prediction stats:
    Accuracy: 96.7%
    Mean Absolute Error: 0.04811792898385254
    Printing details for most similar cases from the first prediction:
    [{'.distance': 0,
      '.session': 'f9d998c9-b357-42a7-bde0-9c9702dd76b9',
      '.session_training_index': 228,
      'x1': 1,
      'x2': 1,
      'x3': 1,
      'x4': 1,
      'x5': 2,
      'x6': 1,
      'x7': 2,
      'x8': 1,
      'x9': 1,
      'y': 0},
     {'.distance': 0,
      '.session': 'f9d998c9-b357-42a7-bde0-9c9702dd76b9',
      '.session_training_index': 508,
      'x1': 1,
      'x2': 1,
      'x3': 1,
      'x4': 1,
      'x5': 2,
      'x6': 1,
      'x7': 2,
      'x8': 1,
      'x9': 1,
      'y': 0},
     {'.distance': 0,
      '.session': 'f9d998c9-b357-42a7-bde0-9c9702dd76b9',
      '.session_training_index': 382,
      'x1': 1,
      'x2': 1,
      'x3': 1,
      'x4': 1,
      'x5': 2,
      'x6': 1,
      'x7': 2,
      'x8': 1,
      'x9': 1,
      'y': 0}]






|

.. code-block:: default


    import os

    from howso import engine
    from howso.utilities import infer_feature_attributes
    import pandas as pd
    from pprint import pprint
    # sphinx_gallery_thumbnail_path = '_static/gallery/howso-ai.png'

    # Get path of breast cancer data included in the python package.
    data_path = os.path.join("breast_cancer.csv")

    # Read in the breast cancer data.
    print("Reading breast cancer data set.")
    df = pd.read_csv(data_path)
    # Define features for the trainee.
    features = infer_feature_attributes(df)
    feature_names = df.columns.tolist()
    action_features = feature_names[-1:]
    context_features = feature_names[:-1]

    # Shuffle the data.
    df = df.sample(frac=1).reset_index(drop=True)

    # Split the data into an 80% training set and 20% test set.
    test_percent = 0.2
    data_train = df[:int(len(df) * (1 - test_percent))]
    data_test = df[int(len(df) * -1 * test_percent):]
    # Remove the target column from the test set
    data_test_no_target = data_test.drop(action_features, axis=1)

    # Create the trainee, using a context manager so resources are released
    # once complete.
    with engine.Trainee(features=features) as t:
        # Train the cases into the trainee.
        print("Training on a random selection of 80% of the data.")
        t.train(data_train)
        print(f"Number of trained cases: {t.get_num_training_cases()}")

        # Run analysis on the trainee.
        print("Analyzing the trainee.")
        t.analyze(context_features, action_features)

        # React to the trainee with the context feature values.
        print("Reacting to 20% reserve test data.")
        details = {'feature_mda': True,
                   'feature_residuals': True,
                   'influential_cases': True,
                   'num_most_similar_cases': 3,
                   'num_boundary_cases': 3,
                   'case_feature_residuals': True}
        result = t.react(
            data_test_no_target,
            action_features=action_features,
            context_features=context_features,
            details=details)

        # Retrieve the prediction stats from the trainee
        t.react_into_trainee(residuals=True)
        stats = t.get_prediction_stats(stats=['accuracy', 'mae'])
        accuracy = stats[action_features[0]]['accuracy']
        mae = stats[action_features[0]]['mae']

    # Print the accuracy of the reaction
    print("Prediction stats:")
    print(f"Accuracy: {accuracy:.1%}")
    print(f"Mean Absolute Error: {mae}")

    # Print a detailed result from audit details.
    print("Printing details for most similar cases from the first prediction:")
    pprint(result['explanation']['most_similar_cases'][0])


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  35.200 seconds)


.. _sphx_glr_download_examples_example_engine.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_engine.py <example_engine.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_engine.ipynb <example_engine.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
