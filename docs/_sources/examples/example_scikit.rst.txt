
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/example_scikit.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_example_scikit.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_example_scikit.py:


.. _howso scikit example:

Scikit Example
==============

An example to demonstrate the usage of Howso in "traditional" ML ways.

The Howso python package extends the `scikit-learn`_ Estimator via the following classes:

* :class:`howso.scikit.HowsoEstimator`
* :class:`howso.scikit.HowsoClassifier`
* :class:`howso.scikit.HowsoRegressor`

HowsoEstimator provides users with a Python interface that follows the conventions of sklearn estimators. For use
of Howso's functionality use :class:`howso.engine.Trainee`.

This is a simple example on how to use the :class:`howso.scikit.HowsoRegressor` which extends the
:class:`howso.scikit.HowsoEstimator` to fit data and make predictions based on that data.

.. _scikit-learn: http://scikit-learn.org/

.. GENERATED FROM PYTHON SOURCE LINES 23-79




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Reading breast cancer data set.
    Target values encoded from [0, 1] to [0, 1].
    Training on a random selection of 80% of the data.
    Scoring against 20% reserve test data:
    0.9781021897810219
    Getting details for most similar cases from the first prediction:
    [{'.distance': 1,
      '.session': 'fd20bb27-9975-4617-8f9c-594177d5471f',
      '.session_training_index': 359,
      '0': 1,
      '1': 2,
      '2': 3,
      '3': 1,
      '4': 2,
      '5': 1,
      '6': 2,
      '7': 1,
      '8': 1,
      'y': '0'},
     {'.distance': 1.4142135623730951,
      '.session': 'fd20bb27-9975-4617-8f9c-594177d5471f',
      '.session_training_index': 147,
      '0': 1,
      '1': 2,
      '2': 2,
      '3': 1,
      '4': 2,
      '5': 1,
      '6': 2,
      '7': 1,
      '8': 1,
      'y': '0'},
     {'.distance': 1.4142135623730951,
      '.session': 'fd20bb27-9975-4617-8f9c-594177d5471f',
      '.session_training_index': 256,
      '0': 1,
      '1': 1,
      '2': 3,
      '3': 2,
      '4': 2,
      '5': 1,
      '6': 3,
      '7': 1,
      '8': 1,
      'y': '0'}]
    Getting class probabilities and classes for the model:
    array([[1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [0.48713743, 0.51286257],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [0.43773037, 0.56226963],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [0.        , 1.        ],
           [0.17725286, 0.82274714],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.765881  , 0.234119  ],
           [0.        , 1.        ],
           [0.20224429, 0.79775571],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [0.        , 1.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [0.39201316, 0.60798684],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.1822613 , 0.8177387 ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.76195267, 0.23804733],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.38038405, 0.61961595],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [0.64041306, 0.35958694],
           [0.        , 1.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [0.16751806, 0.83248194],
           [0.17082706, 0.82917294],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.40195543, 0.59804457],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ],
           [0.        , 1.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [1.        , 0.        ],
           [0.        , 1.        ]])
    array(['0', '1'], dtype='<U21')






|

.. code-block:: default


    import os
    import pandas as pd

    from pprint import pprint
    from howso.scikit import HowsoClassifier
    from sklearn.preprocessing import LabelEncoder
    from sklearn.model_selection import train_test_split
    # sphinx_gallery_thumbnail_path = '_static/gallery/scikit.png'


    # Get path of breast cancer data included in the python package.
    data_path = os.path.join("breast_cancer.csv")

    # Read in the data.
    print("Reading breast cancer data set.")
    df = pd.read_csv(data_path)

    # Split the dataset into the feature (X) and targets (y)
    X = df.drop('y', axis=1).values.astype(float)
    y = df['y'].values.astype(float)

    le = LabelEncoder()
    le.fit(df['y'])
    y = le.transform(df['y'])

    print(f"Target values encoded from {list(le.classes_)} to "
          f"{list(le.transform(le.classes_))}.")

    # Split the dataset into an 80/20 train/test set.
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, shuffle=True)

    # Create a classifier.
    hc = HowsoClassifier()

    # Fit the training data.
    print("Training on a random selection of 80% of the data.")
    hc.fit(X_train, y_train)

    # Test against the reserved test data.
    print("Scoring against 20% reserve test data:")
    score = hc.score(X_test, y_test)

    # Print the resulting accuracy.
    print(score)

    # Detailed prediction results
    results = hc.describe_prediction(X_test)
    print("Getting details for most similar cases from the first prediction:")
    pprint(results['explanation']['most_similar_cases'][0])

    print("Getting class probabilities and classes for the model:")
    probas = hc.predict_proba(X_test)
    pprint(probas)
    pprint(hc.classes_)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.511 seconds)


.. _sphx_glr_download_examples_example_scikit.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_scikit.py <example_scikit.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_scikit.ipynb <example_scikit.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
